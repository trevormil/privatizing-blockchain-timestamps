//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;
library VerifierFinalizePoseidon64 {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal pure returns (G2Point memory) {
        // Original code point
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );

/*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
    }
    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
    function negate(G1Point memory p) internal pure returns (G1Point memory r) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return r the sum of two points of G1
    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-add-failed");
    }
    /// @return r the product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length,"pairing-lengths-failed");
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-opcode-failed");
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2,
            G1Point memory d1, G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
    struct VerifyingKey {
        G1Point alfa1;
        G2Point beta2;
        G2Point gamma2;
        G2Point delta2;
        G1Point[] IC;
    }
    struct Proof {
        G1Point A;
        G2Point B;
        G1Point C;
    }
    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = G2Point(
            [901707276145325775363668620677210049139544346647032435224708097408316244860,
             11589841534093041134413864270656187868916438356273908654106893587911874316514],
            [9102234272066055909563944102992073453279257037297843135328941019582336548659,
             5047430928459821903176668902340990246500354583734230665482440327315491828958]
        );
        vk.IC = new G1Point[](129);
        
        vk.IC[0] = G1Point( 
            76172660519332976741619969483087828049439350204697132449996942199557882884,
            7883673951161994563149585610984056246018259588361091206664422423689317072931
        );                                      
        
        vk.IC[1] = G1Point( 
            5204062116691098896516546580543747846241304442308419611749631193747956664763,
            5563566089864720030512799212959172750005922851017321698841625608494961024222
        );                                      
        
        vk.IC[2] = G1Point( 
            14172892321912003609201226416990406522129449385814074136881254185916310661065,
            10575031720758564089514450889778244155108366349520654128194189748562580029223
        );                                      
        
        vk.IC[3] = G1Point( 
            13158677475742621888451345740943807121633914951591852001455523778393104547283,
            811327899466092828357321788492828366969573247174821982381266725519753379736
        );                                      
        
        vk.IC[4] = G1Point( 
            17120377745746073459537040854390997605732822797873781483013588791100154143891,
            8475663608543511545236901951348841829527631301356131529296535139909266124643
        );                                      
        
        vk.IC[5] = G1Point( 
            11266835312227414854315057229531621641881043464890325371916852508878541680781,
            1431467070992328635461124621749841894589412193194982874492402477463408239674
        );                                      
        
        vk.IC[6] = G1Point( 
            9988902093651632943766068507591236269943098630314190076826605475796927839773,
            18732292981666776040165262574110432771087628674618109860111076100741387776004
        );                                      
        
        vk.IC[7] = G1Point( 
            20277122473582853600444170975113741099610021659652077286313324022723874855437,
            15893013529338590995265744454086562775268789947899587166774479887725937736665
        );                                      
        
        vk.IC[8] = G1Point( 
            5899194749920222351321248844467555764051953117748350298026368713417445555886,
            8384952950463916435407178190707850630143220421247870906972185096313954490072
        );                                      
        
        vk.IC[9] = G1Point( 
            2745200779819601251959330807178242897403865957024793212594043983857388705920,
            5213016400431036998064781656123602512500785455211185808912205034121881731927
        );                                      
        
        vk.IC[10] = G1Point( 
            21219434025068878520478670891526622802100880498037386204350025673067452062292,
            15461263336238869376848214464403029798481222366188413551661392485938298556721
        );                                      
        
        vk.IC[11] = G1Point( 
            15565678877114320571356116957507797493955251618369442565262544282125786935417,
            8044064244349571210325637594855786296894568957630570311489714277538755780079
        );                                      
        
        vk.IC[12] = G1Point( 
            975694436563721532165049285234953238502964611090488198660921543029623837968,
            19175833936759967782364420850016954448243715050476897734795681992397410588508
        );                                      
        
        vk.IC[13] = G1Point( 
            7953998517146825811566540772749034191413859523103631975579194726541736013179,
            15125554237060236449307690060993024809284042718939524217843642806806571351321
        );                                      
        
        vk.IC[14] = G1Point( 
            14890301873312228045944344983763778484555453410457988513672744098137920567563,
            1160152385662314806731961541536414527317940542825339439430687828035441529800
        );                                      
        
        vk.IC[15] = G1Point( 
            1328284659663580264151918439089539352980063437132219819224068394547865735303,
            16564704358397204067447605499595227159820774741262645527938681816654943633499
        );                                      
        
        vk.IC[16] = G1Point( 
            2660100778268420196183848347058089819981566002359969042440427310515567378014,
            3690371212704190443568202435713433652054820052384917791629030403756632171210
        );                                      
        
        vk.IC[17] = G1Point( 
            15280739720894401820427736130742526018591609558450447126602547839734784343704,
            19869223243117232399245995050440012746047242002638418704780941389310999323902
        );                                      
        
        vk.IC[18] = G1Point( 
            5610121935387901332063876948179808932300169031445832389077329159000547944174,
            11985129905381552228982762484480937109582560677773695517342850690637849345348
        );                                      
        
        vk.IC[19] = G1Point( 
            14276535445021614331022869024256366337075537989206469583711983852695276037643,
            13606550736713068109708527967602118389594981587329743866329932277699697490696
        );                                      
        
        vk.IC[20] = G1Point( 
            21742940526259008362531428948823491940695838329641552426890641725898019527945,
            8381671227260973685452983608216969811893769589303430315650482404362755495312
        );                                      
        
        vk.IC[21] = G1Point( 
            10065137194217585168865025162969900756572025876046090181381423330096613645893,
            12237793798957551064933507342443470656459232035183868798173638329952503079459
        );                                      
        
        vk.IC[22] = G1Point( 
            9582892199510753477241910574700317845773840406044831404995240055830365134540,
            2692089772812095094573531137369465865522276886148229829084755238689987199017
        );                                      
        
        vk.IC[23] = G1Point( 
            4621647044183013912071287270875092266165243776960825430862986321325932313202,
            2023691310194179259638122900633659573948028550896037528144905733367599304087
        );                                      
        
        vk.IC[24] = G1Point( 
            15850170707817809354606429272557382333087020670548368500346323319499631743123,
            19804316518898302685181817033185340399843522923269455531903516625805430562573
        );                                      
        
        vk.IC[25] = G1Point( 
            3445513858846628930149875507345193510330629558403122639807960874658843417167,
            12067128958653279053197955232369844381806447460640473563636483613865467002291
        );                                      
        
        vk.IC[26] = G1Point( 
            12363291705044488250801394848637543080776173080866999818983329821486247087840,
            4529357449602996898237227104339369411140923737948425885046848361246160777583
        );                                      
        
        vk.IC[27] = G1Point( 
            5698258685608922880374642828372582724666304198613838370465917420029675572599,
            11278731541151915990732524105610046331136453165905871150566092269518252143480
        );                                      
        
        vk.IC[28] = G1Point( 
            19615376751604237009203364654395902380358580462051921548691160103227877793590,
            1637789054461871122661380742907992073354143506072188839247893274667997689262
        );                                      
        
        vk.IC[29] = G1Point( 
            21326487874869479656791700152877403937336381839441205900682898055146013583090,
            21468319220628140400505356884752580801966637461810692025580937040178132472096
        );                                      
        
        vk.IC[30] = G1Point( 
            575507532041615250177432941349746704659576666792107860530796912228300863628,
            4712590990382828354167726619117452792310973205431086136741255695990497201102
        );                                      
        
        vk.IC[31] = G1Point( 
            4659867931589371144354066048570334977529332475902984598148221006747204569716,
            5895471611732077140115398826197886545211243098667327350611662914817767222864
        );                                      
        
        vk.IC[32] = G1Point( 
            21869286545562231315823149777120352092960590838910234591975869606212367075889,
            14012498614579942156311064119962020515888183895769652718087873896358791464507
        );                                      
        
        vk.IC[33] = G1Point( 
            4464684375353834788096357715187689607017123331329869679330844878245092226671,
            12443717297163528991925328174856549377250442020237593570643503001887622409957
        );                                      
        
        vk.IC[34] = G1Point( 
            17609180383320830590347203323552650835071772282805769427870846950780491561424,
            10639449774493586174576900089496278260720791939635290060324708703515019918090
        );                                      
        
        vk.IC[35] = G1Point( 
            21209163122335537825156486010195032174371878676262601411068046719597557444467,
            17790519354230810599139414878829722011148551441401030999245607173481542645449
        );                                      
        
        vk.IC[36] = G1Point( 
            13542905205663969987338496198690676830665391971482865515963289089154909724644,
            6619247622694376786987032211821414805574984654126141795447983101708433464352
        );                                      
        
        vk.IC[37] = G1Point( 
            13596309932755589517932807587552121705041032090992571178289926944847392261151,
            21355573998723883526676379732379680989526122487366604746561822258454580367841
        );                                      
        
        vk.IC[38] = G1Point( 
            4612190719216790483937755293642291084237514666503245633024811269231690001508,
            14114072211715920556666993139639433585440161961406188704863881336984229737295
        );                                      
        
        vk.IC[39] = G1Point( 
            11764654007751503745165867827842060178578046179265819736380352645596918183515,
            1818304037273720085493523036267743714123121004121680032155254275800122080288
        );                                      
        
        vk.IC[40] = G1Point( 
            21287420497658653391085110617264284195439820036782523054189159426679347896491,
            16282989634146544135512780399392148468148688255889699795026110788615932960563
        );                                      
        
        vk.IC[41] = G1Point( 
            11818101181953001484361094633538051185565849227306271062780977135006800296208,
            327955363409939556144411622166264511262633602852315076016480649794200299482
        );                                      
        
        vk.IC[42] = G1Point( 
            5213296038508320690131177987186556695366210110675516556549927499532822782030,
            13144188415173258265546273645976985091835909901038961022015349454087240327306
        );                                      
        
        vk.IC[43] = G1Point( 
            18260751262586561908717552540944606952112461175221028139323247799861915214516,
            440851214686405928559575764935108590747471992104050870511010108894197187409
        );                                      
        
        vk.IC[44] = G1Point( 
            11520575643130694326072778139284399088040751603281076361987559472780402111829,
            4848052036859729573411072517235090719101738016710560688209439899056261578025
        );                                      
        
        vk.IC[45] = G1Point( 
            3364776673006906703832661251764415263796926625341398384248368633780847949085,
            4734255203783729232330028033708553215231158289798178264912645833574722150252
        );                                      
        
        vk.IC[46] = G1Point( 
            9478726875897351047068081354835402243645153642287990241889717903711396224092,
            8217049670379521288891702668357511191883896448029371694256824741457387117279
        );                                      
        
        vk.IC[47] = G1Point( 
            14782737595599005274266714515775701510998716718415358140955331128219101006893,
            11085943631503000822075999309864789168308973092900387659965660702788010888814
        );                                      
        
        vk.IC[48] = G1Point( 
            7479262164838942410401255941164538566610793750547545842673640429328099702243,
            3938576813274949123048720206411630180633097024062264955391475501038641178769
        );                                      
        
        vk.IC[49] = G1Point( 
            3819979021034021677109606279955783584220194749187645288572129398585059542674,
            2180088454772132629925019936214796176536432649787227126448076147093772250299
        );                                      
        
        vk.IC[50] = G1Point( 
            4368396075756893987589225831995572039974394860095172392274344345953411674734,
            6744231677766400237126221401764521083212417795510889875769616295651853879783
        );                                      
        
        vk.IC[51] = G1Point( 
            5814505037592067975932243465921562429824654221248260843652368824531801530738,
            4437629300170324960521470460543442957730867550007761425336004545337304085180
        );                                      
        
        vk.IC[52] = G1Point( 
            18665548995619755227178764907860714881959875192521699909778491356221877976261,
            12780976145986340207878159736762798107814419610455971723389383183217787605031
        );                                      
        
        vk.IC[53] = G1Point( 
            8553282538207670378032839942827649591377951461622105279700669303885398967346,
            5267824057070493550013860191772324621702642724771911822422240725234538370794
        );                                      
        
        vk.IC[54] = G1Point( 
            6244461353399114119514428320623378082283246657112365157496511283269451694282,
            17720210460823993989288173042570460962289404409092058405701347915373036408519
        );                                      
        
        vk.IC[55] = G1Point( 
            17893869850099506463311500520087814852665761248084707979587573762719937942471,
            7874912962194904520273114232163125737563971474054522942078528755195403671080
        );                                      
        
        vk.IC[56] = G1Point( 
            17759393111341310974014442634847174629183573500828716552756534681316212239756,
            17091604164799094950958593374640898578673578330356766173753327878208704377963
        );                                      
        
        vk.IC[57] = G1Point( 
            16231646507336681150032334365895708899878297440462720766643908439906504838495,
            8635355579560789407216564007767965497706745965660426181681572723511875495599
        );                                      
        
        vk.IC[58] = G1Point( 
            18677327699011838825186618818519502822388713271682559550036242118368186938200,
            16542127027905435326821723497575555528179259388529832329093391992184640075437
        );                                      
        
        vk.IC[59] = G1Point( 
            12979373804203461957020550744053186486983092062530896445409294080483266545287,
            14902575284582873634712094958742244243815713947753334152523915019257603890657
        );                                      
        
        vk.IC[60] = G1Point( 
            18657391805198311327383950246875412413248520568992420641149929811949636825704,
            5472531466080650767830501797620649745834721038915315460199707780447043560932
        );                                      
        
        vk.IC[61] = G1Point( 
            668186276695918803700511131682587710350128225518524579860822743351616510701,
            19793127209006533936294364539841620521182104633196170196177223781979043381906
        );                                      
        
        vk.IC[62] = G1Point( 
            15536806622006284185328161040029521799571596786944689627421986632865504832421,
            3448693080843676607961655982593978635032561386870053630597883632207000140576
        );                                      
        
        vk.IC[63] = G1Point( 
            9477082398279660459529998485576286329633750634265260142436003033900935746857,
            21663028895885420722645126229540247111947749766098195347481149839236187375066
        );                                      
        
        vk.IC[64] = G1Point( 
            1981717421400296475218309854903248629639181815943163867910011261848394681905,
            20013476474048063026270958210651251717042207431696748222521900483420196190006
        );                                      
        
        vk.IC[65] = G1Point( 
            20569149420640066679206055664140067928382841177961051721025853002936517566899,
            21826794996135702237349601568926551818552669374877170164948084033314952918052
        );                                      
        
        vk.IC[66] = G1Point( 
            1940421551313143459648798868163271595052660287326119855268041703457076092834,
            15806956641380220813708220813258313444781613954699085625242442565073462104908
        );                                      
        
        vk.IC[67] = G1Point( 
            15942487624738324827609339717728611671896026916084602944694886273071769513801,
            9407935607700579461302720642440617046972838081568641295974699078344153111743
        );                                      
        
        vk.IC[68] = G1Point( 
            16732216629872101714696699721970212793679604437077201931408866584484562165638,
            16385491433219619026483433716143625584147690138883572122423004268164519769568
        );                                      
        
        vk.IC[69] = G1Point( 
            18693526367058118445783364727162152435115896751834044138963367097683434806301,
            20803050134945026721273016443936442663168625476299445107964782119493136330917
        );                                      
        
        vk.IC[70] = G1Point( 
            9294037075677844343459608685023428916223360548027389551406583048704068105968,
            3049753896053265433453535319492511026343932273530558510238075953966964697307
        );                                      
        
        vk.IC[71] = G1Point( 
            1380964548117719438019578399830950286733975559401466775126445276171128352481,
            8446111859220496165508195234988456880582367003829426973719669778182527519467
        );                                      
        
        vk.IC[72] = G1Point( 
            2694332793330390335547226606568084832002199529990800371822441712557532604743,
            6660940413394371794118850032510113828770141769196109900541858550988445767381
        );                                      
        
        vk.IC[73] = G1Point( 
            2882688694889731759091134553810982678318531979635564079377747180355381211156,
            10881982920749020329359477965947408365165561545861960798865431148455534636061
        );                                      
        
        vk.IC[74] = G1Point( 
            20638846982975267006972064060556230101831637268479061689397041887069468382712,
            8936648135699048695816308652603761330265977223442925302975227048129719713861
        );                                      
        
        vk.IC[75] = G1Point( 
            10079746796916483035999336287967209027170473801462993100849900915664967589331,
            16690756402562090342077189055825245085378829200229205325525141566017237405629
        );                                      
        
        vk.IC[76] = G1Point( 
            7854943868562244329981213166448051391925462281637242654500965297328467878515,
            17858331258095301994825678054786084674356639196827775475598270800093214826799
        );                                      
        
        vk.IC[77] = G1Point( 
            1975522847658123624842217948382544665335274223158756011155622313668665138210,
            20847480833540398171090369766119212948394103316391913837487484531380650772245
        );                                      
        
        vk.IC[78] = G1Point( 
            17326891591120220945114905968365426955974857079024691471608152151022121391843,
            14449310494221747974400204102185750289289583770688683954813258227481148824219
        );                                      
        
        vk.IC[79] = G1Point( 
            11781500646310841368112957095185523100758560333792181462270491883148894050361,
            10772229589417763040500631752830073027867915798425741656228917948014815638310
        );                                      
        
        vk.IC[80] = G1Point( 
            9351410081960899938987728684297014704138241965950627845059549675388394781615,
            16559018880082049864423872738613501007028673581510432408810332735659663460982
        );                                      
        
        vk.IC[81] = G1Point( 
            13612066529019440435837336736121825353454852409185665105074183325294830334839,
            15007380053720625151614165321611441171083859718106708421675719743053442975433
        );                                      
        
        vk.IC[82] = G1Point( 
            13502107487679170328730982310403750555381172906964783926368400456328093132767,
            21200930233859393892139858677943076846572508062897830078890560937961759080241
        );                                      
        
        vk.IC[83] = G1Point( 
            4072180728663661429941842347565485233432840579185148188718084869589768155677,
            20350321447062518768692772173089791599396251525352162296172226349421687774605
        );                                      
        
        vk.IC[84] = G1Point( 
            1527613892433528663590247077072995675843200524080425890609228416579856079326,
            6005704382794938007717670728836408797778056082046798903914310433260780118237
        );                                      
        
        vk.IC[85] = G1Point( 
            21759160336109705834511175905108838751678836322957760102685133494431917442148,
            6389018193019941109800274452859830638158734903665634303247667377160117141330
        );                                      
        
        vk.IC[86] = G1Point( 
            8968889810466640259271531835156841037510840008561947395223660958281553301892,
            11927376285747316666900270397823342916649762663481620123256490725756264616243
        );                                      
        
        vk.IC[87] = G1Point( 
            5977196797298867929502224153876955407293969939820921537976733657215099313944,
            19213790016221373229636055131303379925923295888839223674463874524374884330503
        );                                      
        
        vk.IC[88] = G1Point( 
            13476047971395608630628156641627214098197715361140494137191663275102024120751,
            3543407651498717900772436451613836783830364630331778565165617976586252773624
        );                                      
        
        vk.IC[89] = G1Point( 
            2335245789278898139067943367006170216788797488137074609789505027792729496900,
            16229946231932279724352536241493279728704594264982665291474629692468700730582
        );                                      
        
        vk.IC[90] = G1Point( 
            18635694214718726684123581934842684819081822728150942265048813986396400647955,
            21529365605120186974618742396881029340239416063903969189341885305647065861028
        );                                      
        
        vk.IC[91] = G1Point( 
            20295970257931500297887240582122255409062613240842747341084307635899980391296,
            5153403142684221070157831537384272105521424091318999058772754230221897519048
        );                                      
        
        vk.IC[92] = G1Point( 
            1345448327154635959913566949057316714767902939246665960929004535495499192220,
            9091706940097942884706859435577265828398690289380274053750991928991158354337
        );                                      
        
        vk.IC[93] = G1Point( 
            12690736638180809910748856461225171871787947053342212035963683089934875974038,
            18082045949066514666163082472835439714933311559368594285313034592754051582652
        );                                      
        
        vk.IC[94] = G1Point( 
            1204506864048714185129787350635525137926018546356021552001674544875230087825,
            8337133246719077207931182165143505103542971865628451107181225339998817267470
        );                                      
        
        vk.IC[95] = G1Point( 
            15908468611984804887146989699459602620789645667819496082856268748685133631473,
            1442307672085155624111945307765184523643586598998710244398290538600256432925
        );                                      
        
        vk.IC[96] = G1Point( 
            10347643002919807243203871389473101197062596561153825875311852310566518743972,
            21243607657071400568611601059380024534089925092476670815390911720631490753365
        );                                      
        
        vk.IC[97] = G1Point( 
            14866863771579107947008857159086796706686398011484220404350795802132950788333,
            11801058748997560222440579100173143796972101315173531987929565373483029331107
        );                                      
        
        vk.IC[98] = G1Point( 
            11542423343689663310766687828082735811432158247090113005676158341332991698605,
            2437567928215736086950413194914365617846075407488842385910415590778346615945
        );                                      
        
        vk.IC[99] = G1Point( 
            13710855737518342655591254119389093519610641783665572309058974367952116638578,
            8247083798884569788373741284375298205399769869800380547784386729860125953283
        );                                      
        
        vk.IC[100] = G1Point( 
            7568585695669771384899447276010902143650602832317481621076179340436968588855,
            18029258060139026446541896386118829354507448140719772308226552870895660216633
        );                                      
        
        vk.IC[101] = G1Point( 
            17365464644580277323207844767162001738105411992453611493763860029557800622362,
            13867893273423364399124426638855306386983341193873110104313890594844745357802
        );                                      
        
        vk.IC[102] = G1Point( 
            4138574830619173730795194892865611119191245841025428073162472217550501243340,
            12905929638634698933564635203870246506729003286239915562218752222592407959636
        );                                      
        
        vk.IC[103] = G1Point( 
            10752476235142022643932050555545187029034268046623292906822541583994606961196,
            2407736811750571364154998185070281428968589976631616988907712998659568791557
        );                                      
        
        vk.IC[104] = G1Point( 
            14184819596777233972179877310976738956042848400543281564643774500098633157930,
            3952798684771069732637903658170465341694143233660771466262810173036212132293
        );                                      
        
        vk.IC[105] = G1Point( 
            8572492501662876506860870732845534668913022485498310263113819241324921153670,
            11996008525211170903360976032688075764454946470261806030021926862736665627545
        );                                      
        
        vk.IC[106] = G1Point( 
            2197102763034044961701237800565706776543722310337617897994487123797838926231,
            777584288958637299356097682517190169679121196964355834636783162343458871807
        );                                      
        
        vk.IC[107] = G1Point( 
            18721773511493842998535331651017013633299865340803025584895879673196242130845,
            7445555578527084393516612460846587065984872763705614446961690182136779081841
        );                                      
        
        vk.IC[108] = G1Point( 
            3226232411724529800939111334485783682987918875390062378375865012452979340300,
            17557692637810093428844377944433829897972025127643425320798625633441755073244
        );                                      
        
        vk.IC[109] = G1Point( 
            1363102144461898209156948843372227040464230654348155151463824853971635613575,
            8562122740263398834085683083138261668725987088923100405359590581325358949722
        );                                      
        
        vk.IC[110] = G1Point( 
            8227762547464958452088998023079792910779492617088031867283510231293633279406,
            12396068081167261657388247001824691391678082964132580137928242449709382548425
        );                                      
        
        vk.IC[111] = G1Point( 
            14463516030754085227942238306249721323629630652086169391347085234815064730650,
            3306302583870594378186138335338001588955332794282917796564121531882017395377
        );                                      
        
        vk.IC[112] = G1Point( 
            749165679890620893182990516944137424385754581402658022589781232638882576764,
            10353616281464985744467548342080760258407760931434476319380545697757112230698
        );                                      
        
        vk.IC[113] = G1Point( 
            1291597926844724353185768043043847454917266654048046619712631548340517531678,
            10515312930199605854314645082670488941899117800685860903231530116223620522376
        );                                      
        
        vk.IC[114] = G1Point( 
            8896089410883271340604115986132126351507366970643261413669425577310883929459,
            3986901263629070921987876065498189329544587551531938170240374151362483267748
        );                                      
        
        vk.IC[115] = G1Point( 
            9380638538035862255786996472993861888826087903589210946930651372272572350825,
            10567538356227791796198236627908076238040378025468585290138998805894777208995
        );                                      
        
        vk.IC[116] = G1Point( 
            4017642087212007862596613119325929379153033707327705374211985067971248082541,
            7143128243883492640283913049199040608072038795786065422933958450219250885076
        );                                      
        
        vk.IC[117] = G1Point( 
            17602407050280695651942847526526228947102817383979756996565213513753807666117,
            7069617131786697040103066967780809213942561379061291129566197838751742295560
        );                                      
        
        vk.IC[118] = G1Point( 
            2881284628860106739948793801554615204008363225877749543795941410012413156509,
            8295816649294309732096657801035885682821160509563910888961334797448586432521
        );                                      
        
        vk.IC[119] = G1Point( 
            8034099411393281952399539289889269513871563397032054593790940977653916364128,
            9338081443132264694628931816846422006201972278688313546886519988113740596597
        );                                      
        
        vk.IC[120] = G1Point( 
            20113217058266536981549255296347126217189711530322289296889162271878213221626,
            21112323343684467215336262720026407004249151025418010983043115811855289862427
        );                                      
        
        vk.IC[121] = G1Point( 
            13269243957413476639900574983606895975873823726168139022127643393237996015241,
            7602036774429861270138378544354220162938012596854977329582143420499224807305
        );                                      
        
        vk.IC[122] = G1Point( 
            16154846133781050049959425263731579049429238940592673419147713706624153451231,
            17866054879103910594593748876147907302220703225807303742627751791427263507237
        );                                      
        
        vk.IC[123] = G1Point( 
            13054746624667525368900206630053225044076698930004488424484146134102989801238,
            1936059732828204247909720274300933871589062715552533441820323316372005702467
        );                                      
        
        vk.IC[124] = G1Point( 
            11747799615300883123614513987654387266949604024099964212406567619179648089551,
            8217076610815031942733165719911449002289316021335449189423322792250894623824
        );                                      
        
        vk.IC[125] = G1Point( 
            13320786158730813085213709658558653806180930475098639602671718657884421623642,
            21027852893666699609947997379908708123393818716346071066280657175048928482049
        );                                      
        
        vk.IC[126] = G1Point( 
            9196410950109001486750074218874831754214063011411206297714258732783789372609,
            5495054943255141051639773715272548004246027711306109399753976636554236595972
        );                                      
        
        vk.IC[127] = G1Point( 
            19189436761998478650831021838578881003873436121140468145144752645366898212261,
            16063407382242744561756630731935850835248417541390161754604074685343051629930
        );                                      
        
        vk.IC[128] = G1Point( 
            3284576877065492038039686579739307901072633597575283462228006396037569281150,
            7503389949286398250138114259174270785342039530182105051365605237912733109510
        );                                      
        
    }
    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        G1Point memory vk_x = G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = addition(vk_x, scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = addition(vk_x, vk.IC[0]);
        if (!pairingProd4(
            negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[128] memory input
        ) public view returns (bool r) {
        Proof memory proof;
        proof.A = G1Point(a[0], a[1]);
        proof.B = G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}
